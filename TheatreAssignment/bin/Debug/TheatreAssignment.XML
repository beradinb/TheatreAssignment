<?xml version="1.0"?>
<doc>
  <assembly>
    <name>TheatreAssignment</name>
  </assembly>
  <members>
    <member name="T:TheatreAssignment.ITheatre">
      <summary>
            Theatre Interface
            </summary>
    </member>
    <member name="P:TheatreAssignment.ITheatre.dictionary">
      <summary>
            Dictionary which contains the performance key and a seat class array
            </summary>
    </member>
    <member name="M:TheatreAssignment.ITheatre.reserveSeat(System.Int32,System.Int32,System.Int32)">
      <summary>
            Reserving a seat
            </summary>
      <param name="customerId" />
      <param name="performanceId" />
      <param name="seatNum" />
      <requires csharp="(() =&gt; {&#xD;&#xA;    {&#xD;&#xA;        TheatreAssignment.CSeat[] local_0 = this.dictionary.Item[performanceId - 1];&#xD;&#xA;    }&#xD;&#xA;    return this.dictionary.ContainsKey(performanceId - 1); })()" vb="(() =&gt; {&#xD;&#xA;    TheatreAssignment.CSeat[] local_0 = Me.dictionary.Item[performanceId - 1];&#xD;&#xA;    return Me.dictionary.ContainsKey(performanceId - 1); })()">(() =&gt; {
    {
        TheatreAssignment.CSeat[] local_0 = this.dictionary.Item[performanceId - 1];
    }
    return this.dictionary.ContainsKey(performanceId - 1); })()</requires>
      <requires description="Seat number must be in the range of 1-150" csharp="seatNum - 1 &gt;= 0 &amp;&amp; !(seatNum &gt; local_0.Length)" vb="seatNum - 1 &gt;= 0 AndAlso Not seatNum &gt; local_0.Length">seatNum - 1 &gt;= 0 &amp;&amp; !(seatNum &gt; local_0.Length)</requires>
      <ensures csharp="local_0[seatNum - 1].sState == (TheatreAssignment.SeatState)2" vb="local_0(seatNum - 1).sState = ((TheatreAssignment.SeatState)2)">local_0[seatNum - 1].sState == (TheatreAssignment.SeatState)2</ensures>
    </member>
    <member name="M:TheatreAssignment.ITheatre.buySeat(System.Int32,System.Int32,System.Int32)">
      <summary>
            Buying a seat
            </summary>
      <param name="customerId" />
      <param name="performanceId" />
      <param name="seatNum" />
      <returns />
      <requires description="Seat number must be in the range of 1-150" csharp="(() =&gt; {&#xD;&#xA;    {&#xD;&#xA;        TheatreAssignment.CSeat[] local_0 = this.dictionary.Item[performanceId - 1];&#xD;&#xA;    }&#xD;&#xA;    return seatNum - 1 &gt;= 0 &amp;&amp; !(seatNum &gt; local_0.Length); })()" vb="(() =&gt; {&#xD;&#xA;    TheatreAssignment.CSeat[] local_0 = Me.dictionary.Item[performanceId - 1];&#xD;&#xA;    return seatNum - 1 &gt;= 0 AndAlso seatNum &lt;= local_0.Length; })()">(() =&gt; {
    {
        TheatreAssignment.CSeat[] local_0 = this.dictionary.Item[performanceId - 1];
    }
    return seatNum - 1 &gt;= 0 &amp;&amp; seatNum &lt;= local_0.Length; })()</requires>
      <requires csharp="this.dictionary.ContainsKey(performanceId - 1)" vb="Me.dictionary.ContainsKey(performanceId - 1)">this.dictionary.ContainsKey(performanceId - 1)</requires>
      <ensures csharp="local_0[seatNum - 1].sState == (TheatreAssignment.SeatState)1" vb="local_0(seatNum - 1).sState = ((TheatreAssignment.SeatState)1)">local_0[seatNum - 1].sState == (TheatreAssignment.SeatState)1</ensures>
    </member>
    <member name="M:TheatreAssignment.ITheatre.returnSeat(System.Int32,System.Int32,System.Int32)">
      <summary>
            Returning a seat previously bought by a customer
            </summary>
      <param name="customerId" />
      <param name="performanceId" />
      <param name="seatNum" />
      <requires csharp="(() =&gt; {&#xD;&#xA;    {&#xD;&#xA;        TheatreAssignment.CSeat[] local_0 = this.dictionary.Item[performanceId - 1];&#xD;&#xA;    }&#xD;&#xA;    return this.dictionary.ContainsKey(performanceId - 1); })()" vb="(() =&gt; {&#xD;&#xA;    TheatreAssignment.CSeat[] local_0 = Me.dictionary.Item[performanceId - 1];&#xD;&#xA;    return Me.dictionary.ContainsKey(performanceId - 1); })()">(() =&gt; {
    {
        TheatreAssignment.CSeat[] local_0 = this.dictionary.Item[performanceId - 1];
    }
    return this.dictionary.ContainsKey(performanceId - 1); })()</requires>
      <requires description="Seat number must be in the range of 1-150" csharp="seatNum - 1 &gt;= 0 &amp;&amp; !(seatNum &gt; local_0.Length)" vb="seatNum - 1 &gt;= 0 AndAlso Not seatNum &gt; local_0.Length">seatNum - 1 &gt;= 0 &amp;&amp; !(seatNum &gt; local_0.Length)</requires>
      <ensures csharp="local_0[seatNum - 1].sState == default(TheatreAssignment.SeatState) &amp;&amp; local_0[seatNum - 1].customerId == 0" vb="local_0(seatNum - 1).sState = Nothing AndAlso local_0(seatNum - 1).customerId = 0">local_0[seatNum - 1].sState == default(TheatreAssignment.SeatState) &amp;&amp; local_0[seatNum - 1].customerId == 0</ensures>
    </member>
    <member name="M:TheatreAssignment.ITheatre.cancelReservations(System.Int32)">
      <summary>
            Theatre can cancel reservations
            </summary>
      <param name="performanceId" />
      <requires csharp="this.dictionary.ContainsKey(performanceId - 1)" vb="Me.dictionary.ContainsKey(performanceId - 1)">this.dictionary.ContainsKey(performanceId - 1)</requires>
    </member>
    <member name="M:TheatreAssignment.ITheatre.checkAvailability(System.Int32)">
      <summary>
            Check availability of a performance
            </summary>
      <param name="performance" />
      <returns />
      <requires csharp="this.dictionary.ContainsKey(performance - 1)" vb="Me.dictionary.ContainsKey(performance - 1)">this.dictionary.ContainsKey(performance - 1)</requires>
    </member>
    <member name="M:TheatreAssignment.ITheatre.checkCustomer(System.Int32,System.Int32)">
      <summary>
            Check which customer has booked a seat for a performance by returning customer id from the seat
            </summary>
      <param name="performanceId" />
      <param name="seatNum" />
      <returns />
      <requires csharp="(() =&gt; {&#xD;&#xA;    {&#xD;&#xA;        TheatreAssignment.CSeat[] local_0 = this.dictionary.Item[performanceId - 1];&#xD;&#xA;    }&#xD;&#xA;    return this.dictionary.ContainsKey(performanceId - 1); })()" vb="(() =&gt; {&#xD;&#xA;    TheatreAssignment.CSeat[] local_0 = Me.dictionary.Item[performanceId - 1];&#xD;&#xA;    return Me.dictionary.ContainsKey(performanceId - 1); })()">(() =&gt; {
    {
        TheatreAssignment.CSeat[] local_0 = this.dictionary.Item[performanceId - 1];
    }
    return this.dictionary.ContainsKey(performanceId - 1); })()</requires>
      <requires description="Seat number must be in the range of 1-150" csharp="seatNum - 1 &gt;= 0 &amp;&amp; !(seatNum &gt; local_0.Length)" vb="seatNum - 1 &gt;= 0 AndAlso Not seatNum &gt; local_0.Length">seatNum - 1 &gt;= 0 &amp;&amp; !(seatNum &gt; local_0.Length)</requires>
    </member>
    <member name="M:TheatreAssignment.ITheatre.printSeatingPlan(System.Int32)">
      <summary>
            Printing seat plan of a performance
            </summary>
      <param name="performanceId" />
      <requires csharp="this.dictionary.ContainsKey(performanceId - 1)" vb="Me.dictionary.ContainsKey(performanceId - 1)">this.dictionary.ContainsKey(performanceId - 1)</requires>
    </member>
    <member name="T:TheatreAssignment.TheatreContract">
      <summary>
            Abstract class for the Theatre which contains the code contracts
            </summary>
    </member>
    <member name="P:TheatreAssignment.TheatreContract.dictionary">
      <summary>
            Dictionary which contains the performance key and a seat class array
            </summary>
    </member>
    <member name="M:TheatreAssignment.TheatreContract.buySeat(System.Int32,System.Int32,System.Int32)">
      <summary>
            Buy Seats function which contains the contracts
            </summary>
      <param name="customerId" />
      <param name="performanceId" />
      <param name="seatNum" />
      <returns />
    </member>
    <member name="M:TheatreAssignment.TheatreContract.cancelReservations(System.Int32)">
      <summary>
            Cancel Reservation function which contains the contracts
            </summary>
      <param name="performanceId" />
    </member>
    <member name="M:TheatreAssignment.TheatreContract.checkAvailability(System.Int32)">
      <summary>
            Chech availability function with contracts
            </summary>
      <param name="performanceId" />
      <returns />
    </member>
    <member name="M:TheatreAssignment.TheatreContract.checkCustomer(System.Int32,System.Int32)">
      <summary>
            Check customer function with contracts
            </summary>
      <param name="performanceId" />
      <param name="seatNum" />
      <returns />
    </member>
    <member name="M:TheatreAssignment.TheatreContract.printSeatingPlan(System.Int32)">
      <summary>
            Print seating plan per performance function with contracts
            </summary>
      <param name="performanceId" />
    </member>
    <member name="M:TheatreAssignment.TheatreContract.reserveSeat(System.Int32,System.Int32,System.Int32)">
      <summary>
            Reserve seat function with contracts
            </summary>
      <param name="customerId" />
      <param name="performanceId" />
      <param name="seatNum" />
    </member>
    <member name="M:TheatreAssignment.TheatreContract.returnSeat(System.Int32,System.Int32,System.Int32)">
      <summary>
            Return seat function with contracts
            </summary>
      <param name="customerId" />
      <param name="performanceId" />
      <param name="seatNum" />
    </member>
    <member name="T:TheatreAssignment.SeatState">
      <summary>
            States for each seat
            </summary>
    </member>
    <member name="F:TheatreAssignment.SeatState.Available">
      <summary>
            Available state, seat can be booked.
            </summary>
    </member>
    <member name="F:TheatreAssignment.SeatState.Sold">
      <summary>
            Sold State, customer has bought this seat.
            </summary>
    </member>
    <member name="F:TheatreAssignment.SeatState.Reserved">
      <summary>
            Reserrved state, only customer who reserved this seat can buy it
            </summary>
    </member>
    <member name="F:TheatreAssignment.SeatState.NotInUse">
      <summary>
            Not in use state, can not be reserved or bought.
            </summary>
    </member>
    <member name="T:TheatreAssignment.CSeat">
      <summary>
            Seat Class
            </summary>
    </member>
    <member name="P:TheatreAssignment.CSeat.customerId">
      <summary>
            Holds the customer ID so that the threatre know which seat was booked by which customer
            </summary>
    </member>
    <member name="P:TheatreAssignment.CSeat.sState">
      <summary>
            Holds the state of each seat
            </summary>
    </member>
    <member name="M:TheatreAssignment.CSeat.#ctor">
      <summary>
            Seat Constructor
            </summary>
    </member>
    <member name="T:TheatreAssignment.Theatre">
      <summary>
            Theatre Class, contains all the performances and functions to be carried out on a performance
            </summary>
      <invariant>MAX_SEATS == 150</invariant>
    </member>
    <member name="M:TheatreAssignment.Theatre.ObjectInvariant">
      <summary>
            Invarients for max seats
            </summary>
    </member>
    <member name="M:TheatreAssignment.Theatre.#ctor(System.Int32)">
      <summary>
            Theatre constructer which takes the number of performances
            </summary>
      <param name="performances" />
    </member>
    <member name="M:TheatreAssignment.Theatre.printSeatingPlan(System.Int32)">
      <summary>
            Displays the seating plan of a performance using the
            the performance ID
            </summary>
      <param name="performanceId" />
      <requires inheritedFrom="M:TheatreAssignment.ITheatre.printSeatingPlan(System.Int32)" inheritedFromTypeName="ITheatre" csharp="this.dictionary.ContainsKey(performanceId - 1)" vb="Me.dictionary.ContainsKey(performanceId - 1)">this.dictionary.ContainsKey(performanceId - 1)</requires>
    </member>
    <member name="M:TheatreAssignment.Theatre.buySeat(System.Int32,System.Int32,System.Int32)">
      <summary>
            Buying a seat for a performance by chosing a seat number and passing customerID and performanceID
            </summary>
      <param name="customerId" />
      <param name="performanceId" />
      <param name="seatNum" />
      <returns />
      <requires description="Seat number must be in the range of 1-150" inheritedFrom="M:TheatreAssignment.ITheatre.buySeat(System.Int32,System.Int32,System.Int32)" inheritedFromTypeName="ITheatre" csharp="(() =&gt; {&#xD;&#xA;    {&#xD;&#xA;        TheatreAssignment.CSeat[] local_0 = this.dictionary.Item[performanceId - 1];&#xD;&#xA;    }&#xD;&#xA;    return seatNum - 1 &gt;= 0 &amp;&amp; seatNum &lt;= local_0.Length; })()" vb="(() =&gt; {&#xD;&#xA;    TheatreAssignment.CSeat[] local_0 = Me.dictionary.Item[performanceId - 1];&#xD;&#xA;    return seatNum - 1 &gt;= 0 AndAlso seatNum &lt;= local_0.Length; })()">(() =&gt; {
    {
        TheatreAssignment.CSeat[] local_0 = this.dictionary.Item[performanceId - 1];
    }
    return seatNum - 1 &gt;= 0 &amp;&amp; seatNum &lt;= local_0.Length; })()</requires>
      <requires inheritedFrom="M:TheatreAssignment.ITheatre.buySeat(System.Int32,System.Int32,System.Int32)" inheritedFromTypeName="ITheatre" csharp="this.dictionary.ContainsKey(performanceId - 1)" vb="Me.dictionary.ContainsKey(performanceId - 1)">this.dictionary.ContainsKey(performanceId - 1)</requires>
      <ensures inheritedFrom="M:TheatreAssignment.ITheatre.buySeat(System.Int32,System.Int32,System.Int32)" inheritedFromTypeName="ITheatre" csharp="local_0[seatNum - 1].sState == (TheatreAssignment.SeatState)1" vb="local_0(seatNum - 1).sState = ((TheatreAssignment.SeatState)1)">local_0[seatNum - 1].sState == (TheatreAssignment.SeatState)1</ensures>
    </member>
    <member name="M:TheatreAssignment.Theatre.cancelReservations(System.Int32)">
      <summary>
            Cancelling all reservations for a performance
            </summary>
      <param name="performanceId" />
      <requires inheritedFrom="M:TheatreAssignment.ITheatre.cancelReservations(System.Int32)" inheritedFromTypeName="ITheatre" csharp="this.dictionary.ContainsKey(performanceId - 1)" vb="Me.dictionary.ContainsKey(performanceId - 1)">this.dictionary.ContainsKey(performanceId - 1)</requires>
    </member>
    <member name="M:TheatreAssignment.Theatre.checkAvailability(System.Int32)">
      <summary>
            Checking the seat availability of a performance
            </summary>
      <param name="performanceId" />
      <returns />
      <requires inheritedFrom="M:TheatreAssignment.ITheatre.checkAvailability(System.Int32)" inheritedFromTypeName="ITheatre" csharp="this.dictionary.ContainsKey(performance - 1)" vb="Me.dictionary.ContainsKey(performance - 1)">this.dictionary.ContainsKey(performance - 1)</requires>
    </member>
    <member name="M:TheatreAssignment.Theatre.checkCustomer(System.Int32,System.Int32)">
      <summary>
            Checking which which customer has booked a specific seat in a specific performance
            by returning customerID
            </summary>
      <param name="performanceId" />
      <param name="seatNum" />
      <returns />
      <requires inheritedFrom="M:TheatreAssignment.ITheatre.checkCustomer(System.Int32,System.Int32)" inheritedFromTypeName="ITheatre" csharp="(() =&gt; {&#xD;&#xA;    {&#xD;&#xA;        TheatreAssignment.CSeat[] local_0 = this.dictionary.Item[performanceId - 1];&#xD;&#xA;    }&#xD;&#xA;    return this.dictionary.ContainsKey(performanceId - 1); })()" vb="(() =&gt; {&#xD;&#xA;    TheatreAssignment.CSeat[] local_0 = Me.dictionary.Item[performanceId - 1];&#xD;&#xA;    return Me.dictionary.ContainsKey(performanceId - 1); })()">(() =&gt; {
    {
        TheatreAssignment.CSeat[] local_0 = this.dictionary.Item[performanceId - 1];
    }
    return this.dictionary.ContainsKey(performanceId - 1); })()</requires>
      <requires description="Seat number must be in the range of 1-150" inheritedFrom="M:TheatreAssignment.ITheatre.checkCustomer(System.Int32,System.Int32)" inheritedFromTypeName="ITheatre" csharp="seatNum - 1 &gt;= 0 &amp;&amp; !(seatNum &gt; local_0.Length)" vb="seatNum - 1 &gt;= 0 AndAlso Not seatNum &gt; local_0.Length">seatNum - 1 &gt;= 0 &amp;&amp; !(seatNum &gt; local_0.Length)</requires>
    </member>
    <member name="M:TheatreAssignment.Theatre.reserveSeat(System.Int32,System.Int32,System.Int32)">
      <summary>
            Reserving a seat for a performance by chosing a seat number and passing customerID and performanceID 
            </summary>
      <param name="customerId" />
      <param name="performanceId" />
      <param name="seatNum" />
      <requires inheritedFrom="M:TheatreAssignment.ITheatre.reserveSeat(System.Int32,System.Int32,System.Int32)" inheritedFromTypeName="ITheatre" csharp="(() =&gt; {&#xD;&#xA;    {&#xD;&#xA;        TheatreAssignment.CSeat[] local_0 = this.dictionary.Item[performanceId - 1];&#xD;&#xA;    }&#xD;&#xA;    return this.dictionary.ContainsKey(performanceId - 1); })()" vb="(() =&gt; {&#xD;&#xA;    TheatreAssignment.CSeat[] local_0 = Me.dictionary.Item[performanceId - 1];&#xD;&#xA;    return Me.dictionary.ContainsKey(performanceId - 1); })()">(() =&gt; {
    {
        TheatreAssignment.CSeat[] local_0 = this.dictionary.Item[performanceId - 1];
    }
    return this.dictionary.ContainsKey(performanceId - 1); })()</requires>
      <requires description="Seat number must be in the range of 1-150" inheritedFrom="M:TheatreAssignment.ITheatre.reserveSeat(System.Int32,System.Int32,System.Int32)" inheritedFromTypeName="ITheatre" csharp="seatNum - 1 &gt;= 0 &amp;&amp; !(seatNum &gt; local_0.Length)" vb="seatNum - 1 &gt;= 0 AndAlso Not seatNum &gt; local_0.Length">seatNum - 1 &gt;= 0 &amp;&amp; !(seatNum &gt; local_0.Length)</requires>
      <ensures inheritedFrom="M:TheatreAssignment.ITheatre.reserveSeat(System.Int32,System.Int32,System.Int32)" inheritedFromTypeName="ITheatre" csharp="local_0[seatNum - 1].sState == (TheatreAssignment.SeatState)2" vb="local_0(seatNum - 1).sState = ((TheatreAssignment.SeatState)2)">local_0[seatNum - 1].sState == (TheatreAssignment.SeatState)2</ensures>
    </member>
    <member name="M:TheatreAssignment.Theatre.returnSeat(System.Int32,System.Int32,System.Int32)">
      <summary>
            Allows customer to return seat they have previously reserved
            </summary>
      <param name="customerId" />
      <param name="performanceId" />
      <param name="seatNum" />
      <requires inheritedFrom="M:TheatreAssignment.ITheatre.returnSeat(System.Int32,System.Int32,System.Int32)" inheritedFromTypeName="ITheatre" csharp="(() =&gt; {&#xD;&#xA;    {&#xD;&#xA;        TheatreAssignment.CSeat[] local_0 = this.dictionary.Item[performanceId - 1];&#xD;&#xA;    }&#xD;&#xA;    return this.dictionary.ContainsKey(performanceId - 1); })()" vb="(() =&gt; {&#xD;&#xA;    TheatreAssignment.CSeat[] local_0 = Me.dictionary.Item[performanceId - 1];&#xD;&#xA;    return Me.dictionary.ContainsKey(performanceId - 1); })()">(() =&gt; {
    {
        TheatreAssignment.CSeat[] local_0 = this.dictionary.Item[performanceId - 1];
    }
    return this.dictionary.ContainsKey(performanceId - 1); })()</requires>
      <requires description="Seat number must be in the range of 1-150" inheritedFrom="M:TheatreAssignment.ITheatre.returnSeat(System.Int32,System.Int32,System.Int32)" inheritedFromTypeName="ITheatre" csharp="seatNum - 1 &gt;= 0 &amp;&amp; !(seatNum &gt; local_0.Length)" vb="seatNum - 1 &gt;= 0 AndAlso Not seatNum &gt; local_0.Length">seatNum - 1 &gt;= 0 &amp;&amp; !(seatNum &gt; local_0.Length)</requires>
      <ensures inheritedFrom="M:TheatreAssignment.ITheatre.returnSeat(System.Int32,System.Int32,System.Int32)" inheritedFromTypeName="ITheatre" csharp="local_0[seatNum - 1].sState == default(TheatreAssignment.SeatState) &amp;&amp; local_0[seatNum - 1].customerId == 0" vb="local_0(seatNum - 1).sState = Nothing AndAlso local_0(seatNum - 1).customerId = 0">local_0[seatNum - 1].sState == default(TheatreAssignment.SeatState) &amp;&amp; local_0[seatNum - 1].customerId == 0</ensures>
    </member>
  </members>
</doc>